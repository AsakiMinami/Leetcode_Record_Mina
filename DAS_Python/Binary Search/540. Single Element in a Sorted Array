#Medium
"""
https://leetcode.com/problems/single-element-in-a-sorted-array/

You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.
Return the single element that appears only once.
Your solution must run in O(log n) time and O(1) space.

Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2

"""

class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        if not nums: return None
        left, right = 0, len(nums)-1
        while left < right:
            mid = left + (right - left)//2
            if mid % 2 != 0:
                mid = mid - 1
            if nums[mid] == nums[mid+1]:
                left = mid + 2
            else:
                right = mid
        return nums[left]

"""
Reminder:
In the array we can find certain discipline: 

before target: nums[m]==nums[m+1] when m is even number
after target: nums[n] == nums[n+1] while n is odd number

So we make mid always even and check if nums[mid]==nums[mid+1], if yes then target after mid ==> make left = mid + 2
if not, target before or equals mid ==> make right = mid
"""
        
