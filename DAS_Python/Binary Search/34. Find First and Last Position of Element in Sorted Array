#Medium
"""
Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.
If target is not found in the array, return [-1, -1].
You must write an algorithm with O(log n) runtime complexity.

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
"""

class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        def FindFirst(target,nums):
            left, right = 0, len(nums)
            
            while left < right:
                mid = left + (right - left)//2
                if nums[mid] >= target:
                    right = mid
                else:
                    left = mid + 1
            return left

        first = FindFirst(target, nums)
        last = FindFirst(target+1, nums) - 1
        
        if first == len(nums) or nums[first] != target:
            return [-1,-1]
        else:
            return [first,last]

